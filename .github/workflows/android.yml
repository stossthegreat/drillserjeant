name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.4'

      - name: Flutter pub get
        run: flutter pub get

      - name: Make gradlew executable (if present)
        run: |
          if [ -f android/gradlew ]; then chmod +x android/gradlew; fi

      - name: Build APK
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
        run: |
          set -uxo pipefail
          flutter clean
          DEFINE=""
          if [ -n "${API_BASE_URL}" ] && ! echo "${API_BASE_URL}" | grep -q "example.com"; then
            DEFINE="--dart-define=API_BASE_URL=${API_BASE_URL}"
          fi
          echo "Using DEFINE: ${DEFINE}"
          flutter build apk --release ${DEFINE} -v || true
          echo "Listing build outputs (build/app & android/app):" || true
          ls -R build/app/outputs || true
          ls -R android/app/build/outputs || true
          mkdir -p build/app/outputs/flutter-apk
          FOUND_APK=$(ls -1 build/app/outputs/**/*.apk android/app/build/outputs/**/*.apk 2>/dev/null | head -n 1 || true)
          if [ -n "$FOUND_APK" ]; then
            cp "$FOUND_APK" build/app/outputs/flutter-apk/app-release.apk || true
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: |
            build/app/outputs/**/*.apk 
            android/app/build/outputs/**/*.apk
} 
