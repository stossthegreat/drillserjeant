name: Android Release APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.1"
          channel: "stable"
          cache: true

      - name: Android SDK packages (API 36 + build-tools)
        shell: bash
        run: |
          yes | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager \
            "platforms;android-36" \
            "build-tools;36.0.0" \
            "platforms;android-33" \
            "cmake;3.22.1" \
            "ndk;27.0.12077973" || true

      - name: Flutter pub get
        run: flutter pub get

      - name: Ensure asset directories exist (fix pubspec asset errors)
        run: |
          mkdir -p assets/audio assets/images
          # Keep files so git/CI sees non-empty dirs (harmless in app)
          [ -f assets/audio/.gitkeep ] || echo "# placeholder" > assets/audio/.gitkeep
          [ -f assets/images/.gitkeep ] || echo "# placeholder" > assets/images/.gitkeep

      - name: Build release APK
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
        run: |
          set -uxo pipefail
          flutter clean
          DEFINE=""
          if [ -n "${API_BASE_URL}" ] && ! echo "${API_BASE_URL}" | grep -q "example.com"; then
            DEFINE="--dart-define=API_BASE_URL=${API_BASE_URL}"
          fi
          echo "Using DEFINE: ${DEFINE}"
          flutter build apk --release ${DEFINE} -v || true
          echo "Listing build outputs (build/app & android/app):" || true
          ls -R build/app/outputs || true
          ls -R android/app/build/outputs || true
          # If Flutter didn't copy to flutter-apk, copy any discovered APK there for convenience
          mkdir -p build/app/outputs/flutter-apk
          FOUND_APK=$(ls -1 build/app/outputs/**/*.apk android/app/build/outputs/**/*.apk 2>/dev/null | head -n 1 || true)
          if [ -n "$FOUND_APK" ]; then
            cp "$FOUND_APK" build/app/outputs/flutter-apk/app-release.apk || true
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: |
            build/app/outputs/**/*.apk
            android/app/build/outputs/**/*.apk
